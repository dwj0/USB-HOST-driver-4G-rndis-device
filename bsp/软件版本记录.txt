1、2020年4月28日，操作系统版本3.1.3，  应用程序V0.1， JDIOT-AP01 国家电网物联网接入设备产品软件，创建版本，
             2020年5月7日， 存在当网线断开时，关闭tcp链接出现长时间处于FIN_WAIT_1状态的，时间长达10分钟之久，修改lwip tcp.c程序的中1139行，增加当tcp块处于FIN_WAIT_1, CLOSING状态时，超时2倍MSL时间，即2分钟时间释放tcp块
             相关测试发现的问题都已经解决了。
     2020年6月24日   增加kawii mqtt的协议包，经过测试，能正常联网，但是在断网的情况下协议内部存在内存泄漏，导致用尽，需要走读代码进行解决，协议内部的线程在断网或发生异常时会占用CPU时间不释放，导致低优先级任务无法运行。
     2020年6月30日
     A、platform_thread.c函数中的创建线程，删除线程的方式存在使用已经释放的内存的问题，修改platform_thread_init函数内部采用rt_thread_creat方式创建 ，线程释放时调用的platform_thread_destroy函数置空线程指针就可以了，  已经修改

     B、mqtt_send_packet函数内部已经对timer变量进行了初始化和操作，把timer变量内置为此函数的局部变量，相关外部调用不用初始化， 有一个个例的地方：mqtt_connect_with_results函数的第1005  1008行发送包和接收包函数都会使用同一个connect_timer，这里要求此变量外置。 已经修改

     C、platform_timer_init(&timer);
    platform_timer_cutdown(&timer, c->mqtt_cmd_timeout);这两个函数都是对同一变量进行赋值，建议去除第一个函数，已经修改，删除第一个函数  已经修改

      D、mqtt_connect_with_results，内部申请的发送与接收缓冲区放到mqtt_lease函数中进行。解决多次重新连接导致的内存泄漏
        连接失败时，不执行释放platform_memory_free(c->mqtt_network),方便下次接着使用。
       1025行启动函数只执行一次就可以，删除下和行的。
       增加创建线程失败的打印，位于1031行，同时断开链接    已经修改完成

      E、ack list链表的写入访问采用c->mqtt_write_lock信号量来进行保护， mqtt_publish_packet_handle函数中的调用mqtt_ack_list_record未进行保护？

     F、mqtt_ack_list_unrecord函数对链表的操作没有被c->mqtt_write_lock进行保护？这是为什么  已经修改

     G、mqtt连接断开再重连时，出现内存耗用增加64字节-128字节不等的情况。这时由于断开重新连接网络后mqtt_subscribe函数重新订阅，申请的内存导致的，这里的链表的处理导致内存泄漏了。

     说明：修改了G，D的内存泄漏的地方后，第一次连接网络后，占用动态内存为22616，断开网线后，再次连网动态内存占用22620，之后测试三次断开再连接动态内存占用为22620。也就是说第二次以后，内存占用多了4个字节。
         修改了E， 即对所有链表操作地方增加了互斥信号量保护后，第一次连接网络后，占用动态内存为22616，断开网线后，再次连网动态内存占用22616，后面又进行了三次断网，连接后，内存占用22616。动态内存保持稳定了。

2、2020年7月7日，操作系统版本3.1.3，  应用程序V0.2， 增加cjson模块， webclient模块，tinycrypt模块，准备实现onnet数据点处理功能与自动注册功能
                             由于Onenet下发的命令的topicname 很长，大于64字节，所有mqtt协议的topicname长度配置为100，否则下发命令后再应答，会导致由于收到的topicname中uiid过短，导致mqtt协议由平台关闭。
                             当mqtt被服务器关闭时，mqtt_read_packet直接返回不产生延时，会导致mqtt_yield_thread线程不释放cpu时间，当case 0时增加100ms延时。  
          mqtt协议中，当publish中mqtt_send_packet函数返回失败时，此时一般由于服务器侧关闭了socket链接，此时修改逻辑进行关闭连接，重新建立,  这种情况下长时间运行会导致socket 文件句柄用尽，已解决，在mqtt connect失败的情况下未释放连接。
          问题：IAR工程下，RTC时间显示有问题，差几个小时,RTC目前只在KEIL工程下正常。已经修复：drv_rtc中GetRTCTimeStamp的变量tm_new.tm_isdst = 0;
                   web post后，socket连接处于TIME_WAIT的状态，而不直接释放， http头部中增加Connection: close选项后解决。

3、2021年2月4日， 操作系统版本3.1.3， 应用程序V0.2  增加usb rndis device设备
                  2021年5月9日，实现rndis dev的以太网通信，经过3天的长时间测试。在断开USB连接后一段时间，可能是一小时或几十分钟，出现再连接usb线后，无法枚举设备的问题，单步仿真时，发现连接Usb线时，进入connect中断，此时连接状态变量为已连接的状态。断开时，不进入disconnect中断，仅发现一次，未再复现。此问题已解决，由于USB驱动中被屏蔽断开中断导致的，修改驱动解决问题。
                  2021年5月17日，发现长时间连网后， rndis keepalive消息执行会返回错误，此时以太网数据通信正常，正在分析中，已解决，原因长时间通信过程中会有个别KEEPalvie报文应答超时，导致接收序号判断错误导致的，解决办法，即不再判断序号。
                  未来要完善的功能：A、增加底层4G模块上电初始化的功能，B、当设备连接后，枚举初始化失败，如何让设备重新连接直到成功？C、4G模块网络连接检测，在发生多次断网时，应用层无法联网时进行重新启动模块。
                 2021年5月26日，发现设备从2021年5月21日 20：36- 2021年5月25日 18：39：08在线，之后发生离线，经查此时bulk send时，usb返回超时，同时keepalive也超时发生。解决办法：即此时，keepalive会超时，根据此超时，进行usb设备的重新启动操作或是进行让usb设备断开（比如复位总线或是断开USB总线供电一下，待实现）进行重新连接操作。手工操作的解决办法：拔掉USB线重新连接即可
        

